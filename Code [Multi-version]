#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <iomanip> // Добавьте эту библиотеку

using namespace std;

vector<int> generateRandomVector(int length) {
    vector<int> randomVector(length);

    // Инициализация генератора случайных чисел
    std::srand(static_cast<unsigned int>(time(0)));

    for (int i = 0; i < length; ++i) {
        randomVector[i] = rand() % 5000 + 1;
    }

    return randomVector;
}

void selection_sort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n; i++) {
        int min_inx = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_inx]) {
                min_inx = j;
            }
        }
        swap(arr[i], arr[min_inx]);
    }
}

void insertion_sort(vector<int>& arr) {
    for (int i = 1; i < arr.size(); i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 and arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

vector<int> merge(vector<int>& left, vector<int>& right) {
    vector<int> result;
    int i = 0, j = 0;
    while (i < left.size() and j < right.size()) {
        if (left[i] < right[j]) {
            result.push_back(left[i]);
            i++;
        }
        else {
            result.push_back(right[j]);
            j++;
        }
    }
    result.insert(result.end(), left.begin() + i, left.end());
    result.insert(result.end(), right.begin() + j, right.end());
    return result;
}

vector<int> merge_sort(vector<int>& arr) {
    if (arr.size() <= 1) {
        return arr;
    }
    int mid = arr.size() / 2;
    vector<int> left(arr.begin(), arr.begin() + mid);
    vector<int> right(arr.begin() + mid, arr.end());
    left = merge_sort(left);
    right = merge_sort(right);
    return merge(left, right);
}

vector<int> quick_sort(vector<int>& arr) {
    if (arr.size() <= 1) {
        return arr;
    }
    int pivot = arr[arr.size() / 2];
    vector<int> left, mid, right;
    for (int c : arr) {
        if (c < pivot) left.push_back(c);
        else if (c == pivot) mid.push_back(c);
        else right.push_back(c);
    }
    vector<int> sorted_left = quick_sort(left);
    vector<int> sorted_right = quick_sort(right);
    sorted_left.insert(sorted_left.end(), mid.begin(), mid.end());
    sorted_left.insert(sorted_left.end(), sorted_right.begin(), sorted_right.end());
    return sorted_left;
}

void shell_sort(vector<int>& arr) {
    int n = arr.size();
    int gap = n / 2;
    while (gap > 0) {
        for (int i = gap; i < n; i++) {
            int tmp = arr[i];
            int j = i;
            while (j >= gap and arr[j - gap] > tmp) {
                arr[j] = arr[j - gap];
                j -= gap;
            }
            arr[j] = tmp;
        }
        gap /= 2;
    }
}

void hibbard_sort(vector<int>& arr) {
    int n = arr.size();
    int k = 1;
    int gap = (1 << k) - 1;
    while (gap < n) {
        for (int i = gap; i < n; i++) {
            int tmp = arr[i];
            int j = i;
            while (j >= gap and arr[j - gap] > tmp) {
                arr[j] = arr[j - gap];
                j -= gap;
            }
            arr[j] = tmp;
        }
        k++;
        gap = (1 << k) - 1;
    }
}

void pratt_sort(vector<int>& arr) {
    int n = arr.size();
    int k = 1;
    int gap = (1 << k) + 1;
    while (gap < n) {
        for (int i = gap; i < n; i++) {
            int tmp = arr[i];
            int j = i;
            while (j >= gap and arr[j - gap] > tmp) {
                arr[j] = arr[j - gap];
                j -= gap;
            }
            arr[j] = tmp;
        }
        k++;
        gap = (1 << k) + 1;
    }
}

void bubble_sort(vector<int>& arr) {
    int n = arr.size();

    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Обмен чисел
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void heapify(vector<int>& arr, int n, int root) {
    int largest = root;
    int left = 2 * root + 1;
    int right = 2 * root + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != root) {
        // Обмен
        int temp = arr[root];
        arr[root] = arr[largest];
        arr[largest] = temp;

        heapify(arr, n, largest);
    }
}

void heap_sort(vector<int>& arr) {
    int n = arr.size();

    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for (int i = n - 1; i >= 0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        heapify(arr, i, 0);
    }
}

vector<int> generateSortedVector(int length) {
    vector<int> sortedVector = generateRandomVector(length);
    sort(sortedVector.begin(), sortedVector.end());
    return sortedVector;
}

vector<int> generateReverseSortedVector(int length) {
    vector<int> sortedVector = generateRandomVector(length);
    sort(sortedVector.begin(), sortedVector.end(), greater<int>());
    return sortedVector;
}

vector<int> generatePartiallySortedVector(int length) {
    vector<int> sortedVector = generateSortedVector(length);
    int unsortedPart = length * 0.1;
    for (int i = 0; i < unsortedPart; ++i) {
        int randomIndex = rand() % length;
        swap(sortedVector[i], sortedVector[randomIndex]);
    }
    return sortedVector;
}

void runAllSorts(vector<int> arr) {
    auto start = chrono::high_resolution_clock::now();
    selection_sort(arr);
    auto stop = chrono::high_resolution_clock::now();
    chrono::duration<double> duration = stop - start;
    cout << fixed << setprecision(6) << duration.count() << endl; // Используйте fixed и setprecision

    start = chrono::high_resolution_clock::now();
    insertion_sort(arr);
    stop = chrono::high_resolution_clock::now();
    duration = stop - start;
    cout << fixed << setprecision(6) << duration.count() << endl; // Используйте fixed и setprecision

    start = chrono::high_resolution_clock::now();
    merge_sort(arr);
    stop = chrono::high_resolution_clock::now();
    duration = stop - start;
    cout << fixed << setprecision(6) << duration.count() << endl; // Используйте fixed и setprecision

    start = chrono::high_resolution_clock::now();
    quick_sort(arr);
    stop = chrono::high_resolution_clock::now();
    duration = stop - start;
    cout << fixed << setprecision(6) << duration.count() << endl; // Используйте fixed и setprecision

    start = chrono::high_resolution_clock::now();
    shell_sort(arr);
    stop = chrono::high_resolution_clock::now();
    duration = stop - start;
    cout << fixed << setprecision(6) << duration.count() << endl; // Используйте fixed и setprecision

    start = chrono::high_resolution_clock::now();
    bubble_sort(arr);
    stop = chrono::high_resolution_clock::now();
    duration = stop - start;
    cout << fixed << setprecision(6) << duration.count() << endl; // Используйте fixed и setprecision

    start = chrono::high_resolution_clock::now();
    heap_sort(arr);
    stop = chrono::high_resolution_clock::now();
    duration = stop - start;
    cout << fixed << setprecision(6) << duration.count() << endl; // Используйте fixed и setprecision

    start = chrono::high_resolution_clock::now();
    hibbard_sort(arr);
    stop = chrono::high_resolution_clock::now();
    duration = stop - start;
    cout << fixed << setprecision(6) << duration.count() << endl; // Используйте fixed и setprecision

    start = chrono::high_resolution_clock::now();
    pratt_sort(arr);
    stop = chrono::high_resolution_clock::now();
    duration = stop - start;
    cout << fixed << setprecision(6) << duration.count() << endl; // Используйте fixed и setprecision
}

int main() {
    vector<int> a;
    int length;
    int choice;
    while (true) {
        cout << "\nMain menu: \n";
        cout << "1. Enter the vector length\n";
        cout << "2. Generate random vector\n";
        cout << "3. Generate fully sorted vector\n";
        cout << "4. Generate reverse sorted vector\n";
        cout << "5. Generate partially sorted vector\n";
        cout << "6. Run all sorts\n";
        cout << "0. Exit\n";
        cin >> choice;
        if (choice == 1) {
            cout << "Vector length is: ";
            cin >> length;
        }
        else if (choice == 2) {
            a = generateRandomVector(length);
            cout << "Random vector generated." << endl;
        }
        else if (choice == 3) {
            a = generateSortedVector(length);
            cout << "Fully sorted vector generated." << endl;
        }
        else if (choice == 4) {
            a = generateReverseSortedVector(length);
            cout << "Reverse sorted vector generated." << endl;
        }
        else if (choice == 5) {
            a = generatePartiallySortedVector(length);
            cout << "Partially sorted vector generated." << endl;
        }
        else if (choice == 6) {
            runAllSorts(a);
        }
        else if (choice == 0) return 0;
        else return main();
    }
}
